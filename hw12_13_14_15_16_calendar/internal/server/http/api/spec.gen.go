// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX3WobRxR+lWXay62lNCmEvWtitzWUEtL0Khgz1h7bG7Qzm5mRwJgF/bQkEIMhN71q",
	"2uAXUFwLyz+SX+HMG5WZWf2sNU7sxsQh+MbW7uye8835zvfN2W1S42nGGTAlSbRNBMiMMwn24gGNH8Pz",
	"BkhlrmqcKWD2J82yelKjKuGs8kxyZu7J2iak1Pz6WsA6ichXlWnoiluVlSUhuHhcJCF5nockBlkTSWaC",
	"kYjgX9jHfezrFg71KzwK8BB7eKZbONJtkodkmSkQjNZtpE+I6zUOdVd3dAv7OMSh3tW7AY70SxzgOzzG",
	"XqDbFrXD3jNQf+HqB95g8SdE+Q/2dVt3dUu3Axxi3/zp4REeGNTEvFDEMqkeCqAKlprA1AzPmeAZCJW4",
	"HijF3z6f7g2e4UC3sYdDHGDf1GCE7/Qr3cGB3iUhUVsZkIhIJRK2YWoCLF5VSQqeYK9tbU9tXfEYRzjU",
	"L1xkvTsfeZ2LlCoSkZgq+MaG9KRjXCXrW6trsM6FL+efjjiT7UTvmP+WRzzWXRziQaC7hlA8wBGe4kB3",
	"9E7gHpmAwcE0b8IUbIAwiaWiQl1ip0Ps2V2eOCD/Z48qUfUL9ob/mo3hCPdNSS9BT0OCWE3i+WjLiwGe",
	"FVU6tAF7uoN9PPHFyUMi4HkjERCT6GkBsFSTmUaYJl2ZBOJrz6CmDKByy8+1Z43H9u48ATD2h7k9piAl",
	"3QDPWu4D0Cxk+0Xpwkcx7lm0x6Yb9c7YfgfOO2z8392y7uBIty6xqVv1fQbqS2ISfpQEf23UaiDlxSK8",
	"WFAhke7lmbU1zutAmV9tv2Xx7ZF0K4rP+EgykRK2zufx/PTkyaPg+0fLAR4YDNOB0LZj4IzVTo8H2NMt",
	"h9IVijykdWAxFeZ9EpImCOmC3lmoLlRNGXgGjGYJicjdherCXRKSjKpNK4gKNMfz+wZYwRi52AFzOSYR",
	"+TmRask9EpYn/G+r1SsNp4mCVH5wSrUn5lTdVAi65Z1W93Qbz7CvX44Pm5Hu2AG6Y/sisMuDQgyn5R4/",
	"Mhm+c/h9aCb7rJS/GOwM3EhTKrYMhL9tA3X1i0JKk5SmOXHfcviHJ3PGpafSMxM1cQ0HUj3g8da1fQJ4",
	"Zva83NxKNCCf4/nO9X2EOHo9dL6dKVI/0N0pu2ODOjStby5NCe9dhryZb9Br4fvtGIUzzmFhROVzAvv2",
	"tUJXle0kzp3c66BgnvVFe3/MekYFTUGBkCR66vGsOcdLzIIRMwkJo6l17ZicpzScoee8t618pKzfR/f5",
	"0//qxHct6c75CuLvfZjFycfztdC+V2CYiLzEdej3zR9BfaGkXqzh91ryucLh6Q2x6THt2QY0U0GwvGht",
	"uuHhdWbIvEFqr/9s8AzPlzobqjd9Npi1wopLNnHl8+EGevHNBLrfW+zjIJr+/lqEJtR5lgJTgXvKDJ+i",
	"TiKyqVQWVSp1XqP1TS5VdL96v1oxI2C+kv8XAAD//7J6Odi4FQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
